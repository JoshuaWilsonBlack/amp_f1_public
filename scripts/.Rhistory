)
real_topic_lengths <- qb_filtered %>%
group_by(Speaker, topic_no) %>%
summarise(
topic_length = first(topic_length)
)
fake_topic_lengths <- chunks_filtered %>%
group_by(Speaker, chunk) %>%
summarise(
topic_length = first(topic_length) # chunk_length
) %>%
mutate(
Speaker = as.factor(Speaker)
)
bind_rows(
'Real' = real_topic_lengths,
'Fake' = fake_topic_lengths,
.id = "Source"
) %>%
ggplot(
aes(
x = topic_length,
colour = Source
)
) +
geom_freqpoly(bins=100)
glmm_fit_2 <- read_rds(here('models', 'glmm_pitch_fit_chunks.rds'))
chunks_filtered <- read_rds(here('processed_data', 'chunks_filtered.rds'))
summary(glmm_fit_2)
new_data_fake <- tibble(
speaker_chunk = rep(unique(chunks_filtered$speaker_chunk), times=3),
chunk_part = rep(
c('start', 'middle', 'end'),
each=length(unique(chunks_filtered$speaker_chunk))
),
# Assuming we are in the middle of the monologue
speaker_scaled_time = 0,
speaker_scaled_pitch = 0
)
new_data_fake <- new_data_fake %>%
filter(
!is.na(speaker_chunk)
) %>%
mutate(
Speaker = str_extract(speaker_chunk, 'QB_NZ_[MF]_[0-9]+')
)
new_data_fake <- new_data_fake %>%
mutate(
prediction = predict(glmm_fit_2, newdata=new_data_fake)
)
new_data_fake %>%
mutate(
# Make sure chunks are in correct order in plot.
chunk_part = factor(chunk_part, levels = c('start', 'middle', 'end'))
) %>%
ggplot(
aes(
x = chunk_part,
y = prediction
)
) +
geom_violin(
draw_quantiles = c(0.25, 0.5, 0.75),
alpha = 0.5
) +
geom_jitter(
alpha = 0.1
) +
labs(
title = "Model Predictions for Each Chunk (Fake Topic) with Position in Monologue Controlled.",
x = "Part",
y = "Predicted amplutide"
)
bind_rows(
"Real topics" = new_data,
"Fake topics" = new_data_fake %>%
rename(
topic_part = chunk_part,
speaker_topic = speaker_chunk
),
.id = "source"
) %>%
mutate(
# Make sure chunks are in correct order in plot.
topic_part = factor(topic_part, levels = c('start', 'middle', 'end'))
) %>%
ggplot(
aes(
x = topic_part,
y = prediction,
colour = source
)
) +
geom_violin(
draw_quantiles = c(0.25, 0.5, 0.75),
alpha = 0.2
) +
labs(
title = "Predicted Values for Real and Fake Topics at Midpoint of Monologue",
y = "Predicted (scaled) amplitude",
x = "Part"
)
boot_real <- read_rds(here('models', 'real_topic_boot.rds'))
boot_fake <- read_rds(here('models', 'fake_topic_boot.rds'))
print('Real topics')
boot_real
print('Fake topics')
boot_fake
real_coefs <- coef(summary(glmm_fit))[, 'Estimate'] %>%
as_tibble(rownames = "variable") %>%
mutate(
ll = boot_real[,'2.5 %'],
ul = boot_real[, '97.5 %']
)
fake_coefs <- coef(summary(glmm_fit_2))[, 'Estimate'] %>%
as_tibble(rownames = "variable") %>%
mutate(
ll = boot_fake[,'2.5 %'],
ul = boot_fake[, '97.5 %'],
variable = str_replace(variable, 'chunk', 'topic')
)
glmm_coefs <- bind_rows(
"Real" = real_coefs,
"Fake" = fake_coefs,
.id = "Source"
)
pd = position_dodge(width=0.5)
glmm_coefs %>%
filter(
!variable %in% c('speaker_scaled_time', 'speaker_scaled_pitch')
) %>%
mutate(
variable = factor(
variable,
levels = c(
'(Intercept)', 'topic_partmiddle', 'topic_partend'
)
)
) %>%
ggplot(
aes(
x = variable,
y = value,
colour = Source,
group = Source
)
) +
geom_line(position=pd, alpha = 0.5) +
geom_point(position=pd) +
geom_errorbar(
aes(
ymin = ll, ymax = ul
),
width = 0.25,
position=pd,
alpha = 0.5
) +
labs(
title = "Bootstrap 95% Confidence Intervals of Coefficients for Real and Fake Topics",
x = "Topic part",
y = "Scaled amplitude"
)
qb_gamm_fake_data <- chunks_filtered %>%
mutate(
speaker_chunk = str_c(Speaker, '_', chunk),
speaker_chunk = as.factor(speaker_chunk),
Speaker = as.factor(Speaker)
)
gam_fake_fit <- read_rds(here('models', 'gam_fake_fit.rds'))
gam_fake_fit_summary <- read_rds(here('models', 'gam_fake_fit_summary.rds'))
gam_fake_fit_summary
plot_smooth(gam_fake_fit, view="chunk_time_scaled")
plot_smooth(gam_fake_fit, view="speaker_scaled_time")
coefs <- read_rds(here('processed_data', 'glmm_pitch_coeffs_perm.rds'))
ses <- read_rds(here('processed_data', 'glmm_pitch_ses_perm.rds'))
t_vals <- read_rds(here('processed_data', 'glmm_pitch_tvals_perm.rds'))
violin_three_way <- function(plot_data, comparison_data = list()) {
out_plot <- plot_data %>%
as_tibble() %>%
pivot_longer(
cols = everything(),
values_to = "value"
) %>%
mutate(
name = factor(
name,
levels = c(
'(Intercept)', 'chunk_partmiddle', 'chunk_partend',
'speaker_scaled_time', 'speaker_scaled_pitch'
)
)
) %>%
ggplot(
aes(
x = name,
y = value
)
) +
geom_violin(draw_quantiles = c(0.05, 0.5, 0.95))
if (length(comparison_data) > 1) {
out_plot <- out_plot +
geom_point(colour = "red", data = comparison_data)
}
out_plot
}
var_names <- c(
'(Intercept)', 'chunk_partmiddle', 'chunk_partend', 'speaker_scaled_time',
'speaker_scaled_pitch'
)
summ_glmm_fit <- summary(glmm_fit)
real_model <- summ_glmm_fit$coefficients[,1] %>%
as.tibble() %>%
mutate(
name = var_names
)
real_model_s <- summ_glmm_fit$coefficients[,2] %>%
as.tibble() %>%
mutate(
name = var_names
)
real_model_t <- summ_glmm_fit$coefficients[,3] %>%
as.tibble() %>%
mutate(
name = var_names
)
violin_three_way(coefs, real_model) +
labs(
title = "Distribution of Coefficient Estimates for Random and Topical Segments",
caption = "Red points indicate values for topical segments",
y = "Speaker scaled max amplitude",
x = "Coefficient"
)
violin_three_way(t_vals, comparison_data = real_model_t) +
labs(
title = "Distribution of t-values for Random and Topical Segments",
caption = "Red points indicate values for topical segments",
y = "t-value",
x = "Coefficient"
)
violin_three_way(ses, comparison_data = real_model_s) +
labs(
title = "Distribution of Standard Errors for Random and Topical Segments",
caption = "Red points indicate values for topical segments",
y = "ses value",
x = "Coefficient"
)
violin_three_way <- function(plot_data, comparison_data = list()) {
out_plot <- plot_data %>%
filter(
!name %in% c('speaker_scaled_pitch')
) %>%
as_tibble() %>%
pivot_longer(
cols = everything(),
values_to = "value"
) %>%
mutate(
name = factor(
name,
levels = c(
'(Intercept)', 'chunk_partmiddle', 'chunk_partend',
'speaker_scaled_time', 'speaker_scaled_pitch'
)
)
) %>%
ggplot(
aes(
x = name,
y = value
)
) +
geom_violin(draw_quantiles = c(0.05, 0.5, 0.95))
if (length(comparison_data) > 1) {
out_plot <- out_plot +
geom_point(colour = "red", data = comparison_data)
}
out_plot
}
var_names <- c(
'(Intercept)', 'chunk_partmiddle', 'chunk_partend', 'speaker_scaled_time',
'speaker_scaled_pitch'
)
summ_glmm_fit <- summary(glmm_fit)
real_model <- summ_glmm_fit$coefficients[,1] %>%
as.tibble() %>%
mutate(
name = var_names
)
real_model_s <- summ_glmm_fit$coefficients[,2] %>%
as.tibble() %>%
mutate(
name = var_names
)
real_model_t <- summ_glmm_fit$coefficients[,3] %>%
as.tibble() %>%
mutate(
name = var_names
)
violin_three_way(coefs, real_model) +
labs(
title = "Distribution of Coefficient Estimates for Random and Topical Segments",
caption = "Red points indicate values for topical segments",
y = "Speaker scaled max amplitude",
x = "Coefficient"
)
violin_three_way(coefs, real_model) +
labs(
title = "Distribution of Coefficient Estimates for Random and Topical Segments",
caption = "Red points indicate values for topical segments",
y = "Speaker scaled max amplitude",
x = "Coefficient"
)
violin_three_way <- function(plot_data, comparison_data = list()) {
out_plot <- plot_data %>%
filter(
!name %in% c('speaker_scaled_pitch')
) %>%
as_tibble() %>%
pivot_longer(
cols = everything(),
values_to = "value"
) %>%
mutate(
name = factor(
name,
levels = c(
'(Intercept)', 'chunk_partmiddle', 'chunk_partend',
'speaker_scaled_time', 'speaker_scaled_pitch'
)
)
) %>%
ggplot(
aes(
x = name,
y = value
)
) +
geom_violin(draw_quantiles = c(0.05, 0.5, 0.95))
if (length(comparison_data) > 1) {
out_plot <- out_plot +
geom_point(colour = "red", data = comparison_data)
}
out_plot
}
var_names <- c(
'(Intercept)', 'chunk_partmiddle', 'chunk_partend', 'speaker_scaled_time',
'speaker_scaled_pitch'
)
summ_glmm_fit <- summary(glmm_fit)
real_model <- summ_glmm_fit$coefficients[,1] %>%
as.tibble() %>%
mutate(
name = var_names
)
real_model_s <- summ_glmm_fit$coefficients[,2] %>%
as.tibble() %>%
mutate(
name = var_names
)
real_model_t <- summ_glmm_fit$coefficients[,3] %>%
as.tibble() %>%
mutate(
name = var_names
)
violin_three_way(coefs, real_model) +
labs(
title = "Distribution of Coefficient Estimates for Random and Topical Segments",
caption = "Red points indicate values for topical segments",
y = "Speaker scaled max amplitude",
x = "Coefficient"
)
violin_three_way <- function(plot_data, comparison_data = list()) {
out_plot <- plot_data %>%
as_tibble() %>%
filter(
!name %in% c('speaker_scaled_pitch')
) %>%
pivot_longer(
cols = everything(),
values_to = "value"
) %>%
mutate(
name = factor(
name,
levels = c(
'(Intercept)', 'chunk_partmiddle', 'chunk_partend',
'speaker_scaled_time', 'speaker_scaled_pitch'
)
)
) %>%
ggplot(
aes(
x = name,
y = value
)
) +
geom_violin(draw_quantiles = c(0.05, 0.5, 0.95))
if (length(comparison_data) > 1) {
out_plot <- out_plot +
geom_point(colour = "red", data = comparison_data)
}
out_plot
}
var_names <- c(
'(Intercept)', 'chunk_partmiddle', 'chunk_partend', 'speaker_scaled_time',
'speaker_scaled_pitch'
)
summ_glmm_fit <- summary(glmm_fit)
real_model <- summ_glmm_fit$coefficients[,1] %>%
as.tibble() %>%
mutate(
name = var_names
)
real_model_s <- summ_glmm_fit$coefficients[,2] %>%
as.tibble() %>%
mutate(
name = var_names
)
real_model_t <- summ_glmm_fit$coefficients[,3] %>%
as.tibble() %>%
mutate(
name = var_names
)
violin_three_way(coefs, real_model) +
labs(
title = "Distribution of Coefficient Estimates for Random and Topical Segments",
caption = "Red points indicate values for topical segments",
y = "Speaker scaled max amplitude",
x = "Coefficient"
)
violin_three_way <- function(plot_data, comparison_data = list()) {
out_plot <- plot_data %>%
as_tibble() %>%
pivot_longer(
cols = everything(),
values_to = "value"
) %>%
mutate(
name = factor(
name,
levels = c(
'(Intercept)', 'chunk_partmiddle', 'chunk_partend',
'speaker_scaled_time', 'speaker_scaled_pitch'
)
)
) %>%
filter(
!name %in% c('speaker_scaled_pitch')
) %>%
ggplot(
aes(
x = name,
y = value
)
) +
geom_violin(draw_quantiles = c(0.05, 0.5, 0.95))
if (length(comparison_data) > 1) {
out_plot <- out_plot +
geom_point(colour = "red", data = comparison_data)
}
out_plot
}
violin_three_way(coefs, real_model) +
labs(
title = "Distribution of Coefficient Estimates for Random and Topical Segments",
caption = "Red points indicate values for topical segments",
y = "Speaker scaled max amplitude",
x = "Coefficient"
)
var_names <- c(
'(Intercept)', 'chunk_partmiddle', 'chunk_partend', 'speaker_scaled_time',
'speaker_scaled_pitch'
)
summ_glmm_fit <- summary(glmm_fit)
real_model <- summ_glmm_fit$coefficients[,1] %>%
as.tibble() %>%
mutate(
name = var_names
) %>%
filter(
!name %in% c('speaker_scaled_pitch')
)
real_model_s <- summ_glmm_fit$coefficients[,2] %>%
as.tibble() %>%
mutate(
name = var_names
) %>%
filter(
!name %in% c('speaker_scaled_pitch')
)
real_model_t <- summ_glmm_fit$coefficients[,3] %>%
as.tibble() %>%
mutate(
name = var_names
) %>%
filter(
!name %in% c('speaker_scaled_pitch')
)
violin_three_way(coefs, real_model) +
labs(
title = "Distribution of Coefficient Estimates for Random and Topical Segments",
caption = "Red points indicate values for topical segments",
y = "Speaker scaled max amplitude",
x = "Coefficient"
)
violin_three_way(t_vals, comparison_data = real_model_t) +
labs(
title = "Distribution of t-values for Random and Topical Segments",
caption = "Red points indicate values for topical segments",
y = "t-value",
x = "Coefficient"
)
